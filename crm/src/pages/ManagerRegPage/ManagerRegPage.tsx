import { useState } from "react";
import * as yup from "yup";
import "./ManagerRegPage.scss";
import { supabase } from "@entities/Admin/superbase";

const schema = yup.object({
  email: yup.string().email("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email").required("–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ"),
  password: yup
    .string()
    .min(6, "–ú–∏–Ω–∏–º—É–º 6 —Å–∏–º–≤–æ–ª–æ–≤")
    .required("–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ"),
});
const ManagerRegPage = () => {
  const [values, setValues] = useState({ email: "", password: "" });
  const [errors, setErrors] = useState<{ email?: string; password?: string }>(
    {}
  );
  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    setValues({ ...values, [e.target.name]: e.target.value });
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();

    try {
      // –ü—Ä–æ–±—É–µ–º –≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞—Ç—å –∑–Ω–∞—á–µ–Ω–∏—è
      await schema.validate(values, { abortEarly: false });

      // –ï—Å–ª–∏ –æ—à–∏–±–æ–∫ –Ω–µ—Ç ‚Äî –æ—á–∏—â–∞–µ–º –æ—à–∏–±–∫–∏ –∏ –≤—ã–ø–æ–ª–Ω—è–µ–º –≤—Ö–æ–¥ –≤ Supabase
      setErrors({});
      console.log("–î–∞–Ω–Ω—ã–µ –≤–∞–ª–∏–¥–Ω—ã, –º–æ–∂–Ω–æ –ª–æ–≥–∏–Ω–∏—Ç—å –≤ Supabase:", values);

      // üîπ –ó–¥–µ—Å—å –¥–µ–ª–∞–µ–º –∑–∞–ø—Ä–æ—Å –∫ Supabase
      const { data, error } = await supabase.auth.signInWithPassword({
        email: values.email,
        password: values.password,
      });

      if (error) {
        console.log("–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞:", error.message);
        return;
      }

      const role = data.user?.user_metadata?.role;
      if (role === "admin") {
        console.log("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, –∞–¥–º–∏–Ω!");
        // –ó–¥–µ—Å—å —Ä–µ–¥–∏—Ä–µ–∫—Ç –∏–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∞–¥–º–∏–Ω–∫–∏
      } else {
        console.log("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω–∫–µ");
      }
    } catch (err) {
      // –ï—Å–ª–∏ –µ—Å—Ç—å –æ—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
      if (err instanceof yup.ValidationError) {
        const newErrors: { [key: string]: string } = {};
        err.inner.forEach((e) => {
          if (e.path) newErrors[e.path] = e.message;
        });
        setErrors(newErrors);
        console.log("–û—à–∏–±–∫–∏ —Ñ–æ—Ä–º—ã:", newErrors);
      }
    }
  };

  return (
    <section className="manager">
      <h1 className="manager__title">–ó–∞–ø–æ–ª–Ω–∏–º —Ñ–æ—Ä–º—É –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º —Ä–∞–±–æ—Ç—ã</h1>
      <form className="manager__form" onSubmit={handleSubmit}>
        <label htmlFor="email">
          <div className="manager__form-name">–í–≤–µ–¥–∏—Ç–µ email</div>
          <input
            className="manager__input"
            name="email"
            value={values.email}
            onChange={handleChange}
            placeholder="Email"
          />
        </label>
        {errors.email && <p style={{ color: "red" }}>{errors.email}</p>}

        <label htmlFor="password">
          <div className="manager__form-name">–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å</div>
          <input
            className="manager__input"
            type="password"
            name="password"
            value={values.password}
            onChange={handleChange}
            placeholder="–ü–∞—Ä–æ–ª—å"
          />
        </label>
        {errors.password && <p style={{ color: "red" }}>{errors.password}</p>}

        <button className="manager__button" type="submit">
          –û—Ç–ø—Ä–∞–≤–∏—Ç—å
        </button>
      </form>
    </section>
  );
};

export default ManagerRegPage;
